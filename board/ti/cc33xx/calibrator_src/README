https://processors.wiki.ti.com/index.php/WL18xx_TX_Testing

WL18xx TX Testing
-----------------

Contents
1	Introduction
2	Tune Channel
3	Set TX Power
4	TX Continuous Test
5	TX Tone Test
	5.1	Older Versions
6	ANT1 & ANT2 Assembly Validation for Production

1. Introduction
---------------

This section will review the calibrator commands that may be useful when performing transmission (TX) testing on the WL18xx.

Prerequisites:

1. Your kernel and modules must be compiled with CONFIG_NL80211_TESTMODE=y. You can check this at run-time as follows:

	root@am335x-evm:/usr/share/wl18xx#  zcat /proc/config.gz | grep NL80211_TESTMODE
	CONFIG_NL80211_TESTMODE=y

**** Note: If you don't have that configured, be sure to copy over your kernel and reinstall all modules.

2. The wlan0 interface must be shut down. Run ifconfig wlan0 down to disable it and then run ifconfig one more time to verify it has properly shut down.

3. Before using any of the WLAN commands listed below, you should enter the WL18xx device into PLT mode using the following command:

	cd /usr/share/wl18xx/
	calibrator wlan0 plt power_mode on

============================================================================================================================
2. Tune Channel
---------------

Purpose
	The purpose of the tune_channel command is to configure the WL18xx chip to operate in a specific Wifi band and channel.

Method
	The tune_channel command can be called using the following format:

Syntax
 calibrator wlan0 wl18xx_plt tune_channel  <channel> <band> <bandwidth>

Where:

<channel> is the channel within the wifi band. See the picture below for details.
<band> is the wifi band. Ex: 0 means we are in g band equal to 1 means we are in a band
<bandwidth> is the bandwidth allocation. Use one of the following values

--------------------------------------------------------------------------
Channel				Band		Bandwidth
--------------------------------------------------------------------------			
1-14				0 (2.4GHz)	0/1 (20MHz)
						2 (40MHz Upper Primary)
						3 (40MHz Lower Primary)
--------------------------------------------------------------------------
8(J8), 12(J12), 16(J16),			0/1 (20MHz)
36, 40, 44, 48, 34(J34),			2 (40MHz Upper Primary)
38(J38), 42(J42), 46(J46),    	1 (5GHz)	3 (40MHz Lower Primary)
52, 56, 60, 64, 100, 104
108, 112, 116, 120, 124,
128, 132, 136, 140, 149,
153, 157, 161, 165
---------------------------------------------------------------------------
16(J1), 12(J2), 8(J3), 4(J4)	2 (4.9GHz)	0/1 (20MHz)
						2 (40MHz Upper Primary)
						3 (40MHz Lower Primary)
---------------------------------------------------------------------------

*** Note: Channel tune must be executed before any other calibrator activities. There is no default channel tuned.

Examples

The following tune_channel example configures the chip to operate in the 2.4 GHz band at channel 1 without high-throughput.

 calibrator wlan0 wl18xx_plt tune_channel 1 0 0
=================================================================================================================

Set TX Power
-------------

Purpose
	The set_tx_power command can be used to set the transmission power of the Wl18xx device.

Method
	To set TX power, first boot into PLT mode using the power_mode command, then select the channel to use with 
	the tune_channel command. Finally, you can set the power using the set_tx_power command in the following manner:

Syntax
	calibrator wlan0 wl18xx_plt set_tx_power <output_power> <level> <band> <primary_channel> <2nd_channel> <antenna>
	<non_serving_channel> <channel_limitation> <internal> <gain_calculation> <analog_gain_control_id> <post_dpd_gain>
Where:

---------------------------------------------------------------------------------------------------------------------
Parameter 		output_power
Options		
			0: (0-20000)
			1: (0-20000)
			2: (-15000 - (-4000))	According to parameter 10 (gain_calculation):
Description
			0 (Normal): Desired output power supplied in dBmX1000 at 125 resolution (1/8 dB) 
					i.e. 16.125[dBm] = 16125
			1 (Debug): Desired output power supplied in dBmX1000 at 125 resolution (1/8 dB) 
					i.e. 16.125[dBm] = 16125
			2 (Override): Desired BO from PSAT supplied in dBmX1000 at 125 resolution (1/8 dB) 
					i.e. -10.375[dBm] = -10375
Remarks
			Override mode is supported from FW version 8.9.0.0.20 and calibrator version 0.80
---------------------------------------------------------------------------------------------------------------------
Parameter 		level	
Options 		0-3	
Description 		System support for different pre-configurable power levels in operational mode.
Remarks 		For PLT usage power level should be configured to 0
---------------------------------------------------------------------------------------------------------------------
Parameter 		band	
Options			0: 2.4GHz
			1: 5GHz
			2: 4.9GHz (JP)	
Description 		Operation Band
Remarks
--------------------------------------------------------------------------------------------------------------------
Parameter 		channel_number	
Options			Channel according to used band	
Description		Channel according to used band	
Remarks			Same as configured in channel of tune channel command
---------------------------------------------------------------------------------------------------------------------
Parameter		primary_channel_location	
Options			-1: 40MHz Lower Primary
			0: 20MHZ
			1: 40MHz Upper Primary	
Description		20/40MHz usage	
Remarks			Same as configured in bandwidth of tune channel command:
				-1 = 3 (40MHz Lower Primary)
				0 = 0/1 (20MHz)
				1 = 2 (40MHz Upper Primary)
---------------------------------------------------------------------------------------------------------------------
Parameter		antenna	
Options			0-3	

Description		Used for TX antenna select:
			0: Auto Mode: The FW will automatically selects which TX paths to calculate the power for (based on how many 
				antennas are assembled, band, BW and etc.)
			1: TX1: Force TX power calculation for TX1 path
			2: TX2: Force TX power calculation for TX2 path
			3: Both TX1&TX2: Force TX power calculation for both TX paths
Remarks			
----------------------------------------------------------------------------------------------------------------------
Parameter 		non_serving_channel	
Options			0-1	
Description		0: Serving
			1: Non Serving
			The power settings will be set only for non serving rate groups (basic rates only)
Remarks			
----------------------------------------------------------------------------------------------------------------------
Parameter 		channel_limitation	
Options			0-1	
Description		0: Disabled
			1: Enabled
			Disable/Enable whether to use the channel power limits from the ini file
Remarks						
----------------------------------------------------------------------------------------------------------------------
Parameter 		internal	
Options			Not Supported	
Description		Internal Usage	
Remarks			Default 0
----------------------------------------------------------------------------------------------------------------------
Parameter 		gain_calculation_mode	
Options			0-2	
Description		0: Normal - The BO (digital gain) and the analog gain (VGA/iPA/mixer) are being calculated 
				and set using FW defines
			1: Debug - No BO limits at max analog gain settings - at max gain combination there will 
				be no limits for the available BO (digital gain)
			2: Override - The analog gain and the digital gain are overridden, i.e. the use can choose 
				which of the analog gain combinations he wants to use (choose 1 of the 4 available 
				combinations) and the user can set the digital gain (digital BO as required)
Remarks			Option 2 is supported starting from FW 8.9.0.0.20 and calibrator version 0.80
----------------------------------------------------------------------------------------------------------------------
Parameter 		analog_gain_control_id	
Options			0-4	
Description		Analog settings index	
Remarks			For debug purpose only: This indicator is used to indicate the user's chosen analog gain
----------------------------------------------------------------------------------------------------------------------
Parameter 		post_dpd_gain	
Options			Not Supported	
Description		Not Supported	
Remarks			Default 0
----------------------------------------------------------------------------------------------------------------------

**** Note: There are no default values.

Examples

One example that matches the 'tune_channel' example above is:

 calibrator wlan0 wl18xx_plt set_tx_power 16125 0 0 1 0 0 0 0 0 0 0 0

======================================================================================================================

TX Continuous Test
------------------
Purpose
	The purpose of the TX Continuous test to perform continuous transmission to evaluate the WLAN transmission quality.

Method
	TX Continuous test sends packets of data to the air, where the data packets parameters are controlled by the PLT 
	command and include parameters such as transmitted rate, transmitted power, destination MAC address, etc...
Syntax
		calibrator wlan0 wl18xx_plt start_tx <delay> <rate> <size> <mode> <data_type> <gi> <options1>
				<options2> <source MAC> <dest MAC> <channel_width>

Where
	<delay> 	Delay between packets in microseconds
	<rate> 		Tx rate, supported rates are given in table below
	<size> 		Size of data field in MPDU (in bytes, up to FW 8.9.0.0.19 and Calibrator 0.79: 0-2000, 
				from FW 8.9.0.0.20 and Calibrator 0.80: 0-4065)
	<mode> 		Number of packets (0 - endless)
	<data_type> 	Not Supported -  default 0
	<gi> 		Guard interval
				0 – long
				1 - short
	<options1> 	Unused Field   - default 0
	<options2> 	Supported options according to bitmap:  
				Bit 1: Override CCA (FW 8.9.0.0.2: 0-Don't override, 1-Override)
				Bit 2: Fixed/Incremental Sequence Number (FW 8.9.0.0.20: 0-Incremental, 1-Fixed)
	<source MAC> 	Source MAC address (xx:xx:xx:xx:xx:xx)
	<dest MAC> 	Destination MAC address (xx:xx:xx:xx:xx:xx)
	<channel width> Channel width
				0 – 20 MHz
				1 – 40 MHz
	
<rate> transmission rate:

--------------------------------------------------------------------------------------
    11b	             11g	     11n	             MIMO / 40M
--------------------------------------------------------------------------------------
 0 = 1.0 Mbps	 4 = 6.0 Mbps	 12 = 6.5 Mbps (MCS0)	 20 = MCS8 / MCS4 at 40MHz
 1 = 2.0 Mbps	 5 = 9.0 Mbps	 13 = 13.0 Mbps (MCS1)	 21 = MCS9 / MCS5 at 40MHz
 2 = 5.0 Mbps	 6 = 12.0 Mbps	 14 = 19.5 Mbps (MCS2)	 22 = MCS10 / MCS6 at 40MHz
 3 = 11.0 Mbps	 7 = 18.0 Mbps	 15 = 26.0 Mbps (MCS3)	 23 = MCS11 / MCS7 at 40MHz
 		 8 = 24.0 Mbps	 16 = 39.0 Mbps (MCS4)	 24 = MCS12 / MCS7,40MHz SGI
 		 9 = 36.0 Mbps	 17 = 52.0 Mbps (MCS5)	 25 = MCS13
 		 10 = 48.0 Mbps	 18 = 58.5 Mbps (MCS6)	 26 = MCS14
 		11 = 54.0 Mbps	 19 = 65.0 Mbps (MCS7)	 27 = MCS15
---------------------------------------------------------------------------------------

Examples

The following is an example on how to use the start_tx command (and other commands) to generate packets.

To set the system in PLT mode, use the power_mode command. This command also loads the PLT firmware if not previously loaded.

The next step is to define channel, band, and bandwidth using the tune_channel command & set the desired TX_power.

Use the start_tx command to generate packets. It is important that each start_tx command is followed by the tx_stop command, 
which stops the transmission. Finally, use the power_mode command to reset the system to operational mode.


**** Note: Correct antenna setting are taken from loaded FW with INI settings. assure settings with:

cd /lib/firmware/ti-connectivity/
wlconf -i /lib/firmware/ti-connectivity/wl18xx-conf.bin --get      // list all system parameters 
If needed set the correct num of Ant (example for 2x2.4G(MIMO), 1x5G):
wlconf -i /lib/firmware/ti-connectivity/wl18xx-conf.bin --set wl18xx.phy.number_of_assembled_ant2_4=0x02         // Set 2 Ant for MIMO
wlconf -i /lib/firmware/ti-connectivity/wl18xx-conf.bin --set wl18xx.phy.number_of_assembled_ant5=0x01            // Set 1 Ant for 5G



(0) 11B
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 1
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 0 0 0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 500 3 500 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0
(1) 20MHz
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 1
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 0  0  0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 400 19 3000 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0
(2) 20MHz Primary Upper
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 2
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 1  0  0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 400 19 3000 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0
(3) 20MHz Primary Lower
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 3
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 -1  0  0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 400 19 3000 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0
(4) 40MHz Primary Upper
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 2
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 1  0  0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 300 19 4000 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 1
(5) 40MHz Primary Lower
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel  7 0 3
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 -1  0  0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 300 19 4000 0 0 1 0 0 00:11:22:33:44:55 01:02:03:04:05:06 1

20MHz MIMO
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel 7 0 1
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 7 0 0 0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 300 27 4065 0 0 0 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0

5GHz TX:
20MHz
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel 36 1 1
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 1 36 0 0 0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 400 19 3000 0 0 0 0 0 00:11:22:33:44:55 01:02:03:04:05:06 0

40MHz Upper Primary
	calibrator wlan0 wl18xx_plt stop_tx
	calibrator wlan0 wl18xx_plt tune_channel 36 1 2
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 1 36 1 0 0 1 0 0 0 0
	calibrator wlan0 wl18xx_plt start_tx 400 19 3000 0 0 0 0 0 00:11:22:33:44:55 01:02:03:04:05:06 1

=================================================================================================================================

TX Tone Test
-------------

Purpose
	The purpose of the tx_tone command is to create and transmit a carrier wave that can be modulated with a fixed audio tone.

Method
	The tx_tone command can be called using the following format:

		 calibrator wlan0 wl18xx_plt tx_tone_start <mode> <bin index> <antenna mode> <gain index> 

The tx_tone command can be stopped using the following format:

		 calibrator wlan0 wl18xx_plt tx_tone_stop 
Where:
---------------------------------------------------------------------------
<mode> 			Possible values 
				0 - transmit silence 
				1 - transmit carrier feedthrough 
				2 - transmit single tone 
<bin index> 		Possible values from -32 to +32 in OFDM bins 
<antenna mode>		Possible values
				0 - automatic antenna selection
				1. use TX chain 1 
				2. use TX chain 2 
<gain index>		Possible values 
				2.4GHz 	- 0-4 
				5GHz	- 0-1
-----------------------------------------------------------------------------				

Note:
-----

	1. Silence – TX chain is ON and operational but no signal is transmitted.
	2. Carrier Feed Through – TX chain is ON and operational and the LO leakage is transmitted.
	3. Single Tone – TX chain is ON and operational and a sinusoidal signal is transmitted with 
		the following configuration options:
    			a. Analog Gain Step
    			b. Offset from carrier frequency (in OFDM bins)
Examples
---------

The following examples show how to use the tone test:

// 2.4GHz Transmit Silence
calibrator wlan0 plt power_mode on
calibrator wlan0 wl18xx_plt tune_channel 6 0 0
calibrator wlan0 wl18xx_plt tx_tone_start 0 0 0 0
calibrator wlan0 wl18xx_plt tx_tone_stop

// 2.4GHz Transmit Carrier Feed Through
calibrator wlan0 plt power_mode on
calibrator wlan0 wl18xx_plt tune_channel 6 0 0
calibrator wlan0 wl18xx_plt tx_tone_start 1 0 0 0
calibrator wlan0 wl18xx_plt tx_tone_stop

// 2.4GHz Transmit Single Tone
calibrator wlan0 plt power_mode on
calibrator wlan0 wl18xx_plt tune_channel 6 0 0
calibrator wlan0 wl18xx_plt tx_tone_start 2 0 0 0
calibrator wlan0 wl18xx_plt tx_tone_stop

// 2.4GHz Transmit Single Tone with -5MHz offset from the LO
calibrator wlan0 plt power_mode on
calibrator wlan0 wl18xx_plt tune_channel 6 0 0
calibrator wlan0 wl18xx_plt tx_tone_start 2 -5 0 0
calibrator wlan0 wl18xx_plt tx_tone_stop

// 2.4GHz Transmit Single Tone with -5MHz offset from the LO on lowest PA gain step
calibrator wlan0 plt power_mode on
calibrator wlan0 wl18xx_plt tune_channel 6 0 0
calibrator wlan0 wl18xx_plt tx_tone_start 2 -5 0 4
calibrator wlan0 wl18xx_plt tx_tone_stop

=====================================================================================================================================
Older Versions (TX Tone Command for Version R8.3)

Method

The tx_tone command can be called using the following format:

 calibrator wlan0 wl18xx_plt tx_tone 

**** Note:

	The 11b/g/n patterns generated by the modem has power control (digital gain and VGA) with tx power command.
	The WLAN CW is generated by injecting DC signal to the local oscillator (LO) input thus gain of the CW is 
	determined by the DC level and not controlled in tx_tone command.
	The CW tone is used only for phase noise measurement and therefore the power level control isn’t required.
	For FCC, ETSI and other certification tests use 11b/g/n start_tx command.

Examples
--------
	The following example set shows how to send a CW.

*** Note: 
	There is no stob_tone command (to halt the tone use start_tx or power_mode off)

	calibrator wlan0 plt power_mode on
	calibrator wlan0 wl18xx_plt tx_tone

======================================================================================================================================

ANT1 & ANT2 Assembly Validation for Production
----------------------------------------------

Purpose 
	A simple, fast and cheap solution to assure both RF paths are functional. The target is to establish connection with 
	remote AP once using SISO scheme, first on ANT1 and later on ANT2.

Method
	The procedure should be very simple:

- Download the WLAN driver, change wl_conf (INI) parameter that modified the main antenna to be (ANT2 SISO, BG1)
- Establish connection with AP using BG2 (ANT2 - MIMO)
- Configure the platform back to the original configuration
- Establish Connection with AP after booting using the main antenna (ANT1 SISO, BG2)
- The following sequence will be required for the testing procedure:

* Configuration changed to BG1 primary #
 sh sta_stop.sh
 sh unload_wlcore.sh
 cd /usr/sbin/wlconf
 ./wlconf -i /lib/firmware/ti-connectivity/wl18xx-conf.bin -o /lib/firmware/ti-connectivity/wl18xx-conf.bin --set wl18xx.phy.spare0=0x08

* Connected to the AP with SSID = "AP_NAME" using BG1 #
 cd /usr/share/wl18xx
 sh load_wlcore.sh
 sh sta_start.sh
 sh sta_connect-ex.sh "AP_NAME"

* Configuration changed back to BG2 primary #
 sh sta_stop.sh
 sh unload_wlcore.sh
 cd /usr/sbin/wlconf
 ./wlconf -i /lib/firmware/ti-connectivity/wl18xx-conf.bin -o /lib/firmware/ti-connectivity/wl18xx-conf.bin --set wl18xx.phy.spare0=0x00

Re-connect to AP with default SISO on ANT1.

=======================================================================================================================================

----------- Old Notes ---------------------
The calibrator and other useful utilities for TI wireless solution,
based on the wl12xx and wl18xx drivers.

In userspace there is dependent on libnl v2.x package. It can be downloaded
from http://www.infradead.org/~tgr/libnl/files/libnl-2.0.tar.gz

Set follow environment variables:
export NFSROOT=<path to roofs of a target where installed libnl library>
export CROSS_COMPILE=arm-none-linux-gnueabi-
make
make install

--- How to calibrate wl12xx

Calibration is a process in which specific radio configuration
parameters are generated and saved into the NVS file, later to be used
by the wl12xx driver upon initialization.

These configuration parameters are specific to the chip on the
specific design and therefore are sent back to the driver to store in
non-volatile memory for later use. Upon initialization, the wl12xx
driver will load an NVS file where it expects to read those parameters
and send them to the chip.

The NVS file contains 2 main parts - one stores the calibration
parameters and the other one stores initialization information
required for the wl12xx driver.

Automatic calibration procedure.

* Make sure all modules up to wl12xx.ko are loaded. wl12xx_sdio.ko should NOT be loaded.
* The firmware directory must be writeable.
* A "plt firmware" must be present in the firmware directory.

calibrator plt autocalibrate <dev> <kernel mod> <ini> <nvs> <mac>
	dev		Device name. Probably wlan0
	kernel mod	Full path to wl12xx_sdio.ko kernel module
	ini 		Full path to Radio param ini file
	nvs		Full path of nvs file. Must be the real path as wl12xx will load it

This command will perform the following steps:

* Parse the ini and create an nvs without calibration data.
* Load kernel module.
* Perform TxBip and update nvs with calibration data.
* Unload kernel module.

Android example:
./calibrator plt autocalibrate wlan0 /system/lib/modules/wl12xx_sdio.ko TQS_D_1.7.ini /etc/firmware/ti-connectivity/wl1271-nvs.bin 00:01:02:03:04:05

Native Linux example:
./calibrator plt autocalibrate wlan0 /lib/modules/wl12xx_sdio.ko TQS_D_1.7.ini /lib/firmware/ti-connectivity/wl1271-nvs.bin 00:01:02:03:04:05

--- How to choose INI file (wl12xx)

For Beagle board and Panda board use ini_files/127x/TQS_S_2.6.ini
For Blaze board with ES2.1 or ES2.1 use ini_files/128x/TQS_D_1.7.ini

--- How to change MAC address in calibrated NVS

./calibrator set nvs_mac <nvs file> [<mac addr xx:xx:xx:xx:xx:xx>]

If the MAC address missing, the random valid value will be added.


--- How to dump NVS file (wl12xx)

calibrator get dump_nvs [<nvs filename>]


--- Detailed instructions for calibrator procedures (wl12xx)

Normally you should use the autocalibrate command but it's also possible to
run each step manually.

	TxBip procedure (calibration)

It is important to set MAC address to an interface before the procedure.
For example, `ifconfig wlan0 hw ether xx:xx:xx:xx:xx:xx'

calibrator wlan0 plt power_mode on
calibrator wlan0 plt tx_bip <0|1> <0|1> <0|1> <0|1> <0|1> <0|1> <0|1> <0|1>
calibrator wlan0 plt power_mode off

Result of this procedure is new NVS file created locally ./new-nvs.bin
In order to use it, copy the file to /lib/firmware/wl1271-nvs.bin and reload.

	TxCont procedure

calibrator wlan0 plt power_mode on
calibrator wlan0 plt tune_channel <band> <channel>
calibrator wlan0 plt tx_cont <delay> <rate> <size> <amount> <power> <seed> <pkt mode> <DC on/off> <gi> <preamble> <type> <scramble> <clpc> <seq nbr mode> <dest mac>
calibrator wlan0 plt tx_stop
calibrator wlan0 plt power_mode off

Description: This test sends packets of data directly to air. It receives
several parameters as described bellow, to enable diversity of
operational modes.
It is mostly used to see Energy and radio impact on Air.
Content of Packet can be Random, or Zero, One, Zero, one...

Packets send are configurable with following parameters:
  Delay between packets in microseconds
  Rate
    1 Mbps -   0x00000001       MCS_0 - 0x00002000
    2 Mbps -   0x00000002       MCS_1 - 0x00004000
    5.5 Mbps - 0x00000004       MCS_2 - 0x00008000
    6 Mbps -   0x00000008       MCS_3 - 0x00010000
    9 Mbps -   0x00000010       MCS_4 - 0x00020000
    11 Mbps -  0x00000020       MCS_5 - 0x00040000
    12 Mbps -  0x00000040       MCS_6 - 0x00080000
    18 Mbps -  0x00000080       MCS_7 - 0x00100000
    24 Mbps -  0x00000200
    36 Mbps -  0x00000400
    48 Mbps -  0x00000800
    54 Mbps -  0x00001000
  Size of data field in MPDU (in bytes, 0 - 2284)
  Amount - number of packets in case of using series mode
  Power - output power in dBm*1000
  Seed - value for the scrambler
  Packet mode - 0-single, 1-multipile, 3-continuous, 4-FCC
  DC on/off - activate DCF
  gi - guard interval on/off for 11n rates
  Preamble
    1 Mbps - long preamble mode=0
    2, 5.5, 11 Mbps - long preamble mode=0, short preamble mode=1
    6, 9, 12, 18, 24, 36, 48, 54 Mbps - ofdm preamble mode=4
    from MCS_0 to MCS_7 - n mixed mode preamble mode=6, greenfield preamble mode=7
  Type is 0-data packet, 1-ack, 2-probe req, 3-random data, 4-user data
  Scrambler - on/off
  CLPC
    range 0-100 is disable calibration
  Sequence number mode (incremented or fixed)
  Destination Mac address

	RxStat procedure

There are 2 ways to do it - short where all parameters has default values and
full where you have to set all parameters manually.

Short way:
calibrator plt rx_statistics

In the short way each time the statistics will be reseted.

Full way:
calibrator wlan0 plt power_mode on
calibrator wlan0 plt start_rx_statcs
calibrator wlan0 plt get_rx_statcs
calibrator wlan0 plt stop_rx_statcs
calibrator wlan0 plt power_mode off

While willing to reset the statistic run:
calibrator wlan0 plt reset_rx_statcs

	Update NVS file procedure

This is procedure changes ini part of NVS file. It helps when there is need
to change ini part of NVS which already calibrated.

calibrator set upd_nvs <ini file> [<old nvs file> [<new nvs file>]]

If NVS filename parameter not provided the current NVS file will be used from
destination directory (usually /lib/firmware).


--- Miscellaneous procedures

	Read MAC address from NVS file

calibrator get nvs_mac [<nvs filename>]

	Set NVS to use auto FEM detection

calibrator set autofem 1


	Set FEM manufacturer

calibrator set fem_manuf 0|1


	Tone transmission testing
Get in PLT mode
calibrator wlan0 plt power_mode on

Run TxTone transmission
calibrator wlan0 plt tx_tone <tone type> <power>
Tone type
    1 - Carrier FeedThrough
    2 - Single tone
Power [0 - 10000] mdB

Stop transmission
calibrator wlan0 plt tx_stop

Get out from PLT mode
calibrator wlan0 plt power_mode off

-------------------------------------------------------------------------------

--- wl18xx calibration

The wl18xx hardware does most of the calibration by itself, so the
calibration per-se is not necessary.  The tool provides command for
PLT (Production Line Tests), though.

--- MAC addres for wl18xx

For now (as of 20.04.2012), the wl18xx driver uses an NVS file with
the same format as the one used for wl12xx.  Most of the parameters in
this file are not used.  One of the parameters that is still used is
the MAC address.  The wl18xx chip has its own MAC address derived from
FuseROM, but this address can be overriden by setting it in the NVS
file.   If the MAC address in the NVS file is 00:00:00:00:00:00, the
default MAC, burnt in FuseROM is used.

1. The following procedure allows the MAC address to be changed in the
NVS file:

   calibrator wlan0 plt set_mac <nvs_file> [<MAC address>|from_fuse|default]

	<MAC address>		specific address to use (XX:XX:XX:XX:XX:XX)
	from_fuse		try to read from the fuse ROM, if not available the command fails
	default			write 00:00:00:00:00:00 to have the driver read from the fuse ROM,
				fails if not available
	00:00:00:00:00:00	force use of a zeroed MAC address (use with caution!)

2. To read the MAC address that is derived from the FuseROM, the
following command can be used:

   calibrator wlan0 plt get_mac


--- wl18xx power modes

To be able to use the PLT procedures, the firmware needs to be booted
in PLT-mode.  To do so, the wl18xx modules need to be loaded and the
interface wlan0 must be down.  Then use the following command to boot
it in PLT-mode:

   calibrator wlan0 plt power_mode on

The following special plt power-on mode is available for WL6/WL7 devices and
is used to detect the wlan FEM radio module type. This can be used in order
to verify the fem manufacturer inside the ini file when using manual FEM detection.
There is no need to do power_mode off after detect mode:

   calibrator wlan0 plt power_mode fem_detect
   ...
   Firmware detect FEM type=1

The following special plt power-on mode is used to power the chip on without
downloading fw and enabling driver functionality except SDIO mem device.
This can be used in order to bridge RTTT using SDIO:

   calibrator wlan0 plt power_mode chip_awake

And to turn it off (so that it can be booted in normal mode by putting
the wlan0 interface up again):

    calibrator wlan0 plt power_mode off

--- TX simulation in wl18xx

The wl18xx firmware supports TX packets simulation.  With the
following commands, the device will send pre-defined packets to the
air:

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. Select the channel to use:

   calibrator wlan0 wl18xx_plt tune_channel <channel> <band> <bandwidth>

   Eg., to use channel 1 with no HT bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 1 0 0

   Eg., to use channel 136 with 40MHz bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 136 1 1

   Eg., to use channel 1 with 40MHz Minus  bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 1 0 2

   Eg., to use channel 1 with 40MHz Plus bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 1 0 3

3. Start transmitting packets:

   calibrator wlan0 wl18xx_plt start_tx <delay> <rate> <size> <mode> <data_type> <gi> <options1> <options2> <source MAC> <dest MAC> <20|40>

   Where the following parameters can be used:

	 <delay>         delay between packets in us
	 <rate>          transmission rate:
			                0  =  1.0 Mbps                  1  =  2.0 Mbps
					2  =  5.0 Mbps                  3  = 11.0 Mbps
					4  =  6.0 Mbps                  5  =  9.0 Mbps
					6  = 12.0 Mbps                  7  = 18.0 Mbps
					8  = 24.0 Mbps                  9  = 36.0 Mbps
					10 = 48.0 Mbps                  11 = 54.0 Mbps
					12 =  6.5 Mbps (MCS0)           13 = 13.0 Mbps (MCS1)
					14 = 19.5 Mbps (MCS2)           15 = 26.0 Mbps (MCS3)
					16 = 39.0 Mbps (MCS4)           17 = 52.0 Mbps (MCS5)
					18 = 58.5 Mbps (MCS6)           19 = 65.0 Mbps (MCS7)
					20 = 65.0 Mbps + 10% (MCS7 SGI) 21 = MCS8/MCS4  at 40MHz
					22 = MCS9/MCS5  at 40MHz        23 = MCS10/MCS6 at 40MHz
					24 = MCS11/MCS7 at 40MHz        25 = MCS12/MCS7 at 40MHz SGI
					26 = MCS13                      27 = MCS14
					28 = MCS15                      29 = MCS15 SGI
	<size>          packet size (bytes)
	<mode>          number of packets (0 = endless)
	<data_type>     TBD
	<gi>            guard interval (0 = normal, 1 = short)
	<options1>      TBD
	<options2>      TBD
	<source MAC>    source MAC address (XX:XX:XX:XX:XX:XX)
	<dest MAC>      destination MAC address (XX:XX:XX:XX:XX:XX)
	<channel width> channel width (0 = 20 MHz, 1 = 40 MHz)

   For example, to transmit packets continuously at 500ms intervals
   with 1024 bytes length (plus headers) at 65 Mbps (MCS7) on a 40MHz
   channel:

      calibrator wlan0 wl18xx_plt start_tx 500000 19 1024 0 0 0 0 0 00:11:22:33:44:55 01:02:03:04:05:06 1

note, In start_tx there are 3 fields that are TBD and the user must send the command with some value, please “0”:
           - <option1> and <option2> set as 0.
           - <data_type> set as 0.

4. To stop transmitting packets:

      calibrator wlan0 wl18xx_plt stop_tx

   NOTE: it is very important to stop transmitting packets before
   attempting a second start_tx command! If this is not done properly,
   the results will be undefined (and probably not what you want).

--- RX statistics in wl18xx

The wl18xx firmware can capture packets from the air and report
statistics about it.  This can be used to make sure the calibration,
antennas and RF in general is working properly.

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. Select the channel to use:

   calibrator wlan0 wl18xx_plt tune_channel <channel> <band> <bandwidth>

   Eg., to use channel 1 with 20MHz bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 1 0 0

   Eg., to use channel 136 with 40MHz bandwidth:
	calibrator wlan0 wl18xx_plt tune_channel 136 1 1

3. Start gathering data:

   calibrator wlan0 wl18xx_plt start_rx

4. Read the current statistics about packet reception:

   calibrator wlan0 wl18xx_plt get_rx_stats

5. Stop gathering RX statistics:

   calibrator wlan0 wl18xx_plt stop_rx



--- TX set power in wl18xx

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. Select the channel to use (see above):

   calibrator wlan0 wl18xx_plt tune_channel <channel> <band> <bandwidth>

3. set the power

   calibrator wlan0 wl18xx_plt set_tx_power <output_power> <level> <band>
                 <primary_channel> <2nd_channel> <antenna> <non_serving_channel>
                  <channel_limitation> <frontend_limit> <gain_calculation>
                   <analog_gain_control_id> <post_dpd_gain>

   Where the following parameters can be used:

	<output_power>			Desired power output supplied in
					dBmX1000 at 125 resolution (1/8 dB),
					i.e. 16.125[dBm] = 16125
	<level>				Indicates which table to refer to (0-3)
	<band>				0 = G band
					1 = A band
	<primary_channel>		Operation channel
	<2nd_channel>			Select the 2nd channel in siso40
					0 = below
					1 = above
	<antenna>			Used for Tx antenna select.
					0 = auto mode
					1 = TX1
					2 = TX2
					3 = Both TX1 & TX2
	<non_serving_channel>		Will this level be used for
					non serving channel
	<channel_limitation>		Notifies the PHY FW when to discard
					internal limits, disable only per
					channel limits
	<frontend_limit>		Notifies the PHY FW when to discard
					external limits - disable per rate
					limits when using external PA platform
	<gain_calculation>		Used to determine one of three gain
					calculation modes (debug only)
					0 = normal operation
					1 = debug mode
					2 = override mode
	<analog_gain_control_id>	When gainCalcMode is set to mode 3,
					this indicator will be used to indicate
					the user's chosen analog index
	<post_dpd_gain>			sets the post DPD gain

   Good default values are:
	calibrator wlan0 wl18xx_plt set_tx_power <out_power> 0 <band> <channel> <freq2ndChInd> 0 0 0 0 1 0 0

   For example, to set the power to 20dBm @ channel 11 use the following command:
	calibrator wlan0 wl18xx_plt set_tx_power 20000 0 0 11 0 0 0 0 0 1 0 0

4. start transmit (see start TX)


---  Set antenna mode in wl18xx

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. set the antenna for the 2.4GHz:

   calibrator wlan0 wl18xx_plt set_antenna_mode_24G <mac_prim_rx_chain> <mac_prim_tx_chain> <mac_rx_chain1_en> <mac_rx_chain2_en> <mac_tx_chain1_en> <mac_tx_chain2_en>

3. set the antenna for the 5GHz:

   calibrator wlan0 wl18xx_plt set_antenna_mode_5G <mac_prim_rx_chain> <mac_rx_chain1_en> <mac_rx_chain2_en> <mac_tx_chain1_en>

---  Read  PHY register in wl18xx

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. Read register address:

   calibrator wlan0 wl18xx_plt wl18xx_plt phy_reg_read <addr>

   Note: the address is expected in hexadecimal representation.

---  Write PHY register in wl18xx

1. Boot the firmware in PLT mode:

   calibrator wlan0 plt power_mode on

2. Write register address:

   calibrator wlan0 wl18xx_plt wl18xx_plt phy_reg_write <addr> <data>

   Note: the address and data are expected in hexadecimal representation.


-------------------------------------------------------------------------------

The project can be accessed from git repository:
	git clone git://github.com/TI-OpenLink/ti-utils.git
